/* This is a mst-gql generated file, don't modify it manually */
/* eslint-disable */
/* tslint:disable */

import { types } from "mobx-state-tree"
import { QueryBuilder } from "mst-gql"
import { ModelBase } from "./ModelBase"
import { CredentialModel, CredentialModelType } from "./CredentialModel"
import { CredentialModelSelector } from "./CredentialModel.base"
import { UserModel, UserModelType } from "./UserModel"
import { UserModelSelector } from "./UserModel.base"
import { UserOnboardingDataModel, UserOnboardingDataModelType } from "./UserOnboardingDataModel"
import { UserOnboardingDataModelSelector } from "./UserOnboardingDataModel.base"
import { RootStoreType } from "./index"


/**
 * LoginPayloadBase
 * auto generated base class for the model LoginPayloadModel.
 *
 * Autogenerated return type of Login
 */
export const LoginPayloadModelBase = ModelBase
  .named('LoginPayload')
  .props({
    __typename: types.optional(types.literal("LoginPayload"), "LoginPayload"),
    credentials: types.union(types.undefined, types.late((): any => CredentialModel)),
    errors: types.union(types.undefined, types.null, types.array(types.string)),
    onboardingData: types.union(types.undefined, types.null, types.late((): any => UserOnboardingDataModel)),
    preApplicationStep: types.union(types.undefined, types.null, types.string),
    subdomain: types.union(types.undefined, types.null, types.string),
    user: types.union(types.undefined, types.null, types.late((): any => UserModel)),
  })
  .views(self => ({
    get store() {
      return self.__getStore<RootStoreType>()
    }
  }))

export class LoginPayloadModelSelector extends QueryBuilder {
  get errors() { return this.__attr(`errors`) }
  get preApplicationStep() { return this.__attr(`preApplicationStep`) }
  get subdomain() { return this.__attr(`subdomain`) }
  credentials(builder?: string | CredentialModelSelector | ((selector: CredentialModelSelector) => CredentialModelSelector)) { return this.__child(`credentials`, CredentialModelSelector, builder) }
  onboardingData(builder?: string | UserOnboardingDataModelSelector | ((selector: UserOnboardingDataModelSelector) => UserOnboardingDataModelSelector)) { return this.__child(`onboardingData`, UserOnboardingDataModelSelector, builder) }
  user(builder?: string | UserModelSelector | ((selector: UserModelSelector) => UserModelSelector)) { return this.__child(`user`, UserModelSelector, builder) }
}
export function selectFromLoginPayload() {
  return new LoginPayloadModelSelector()
}

export const loginPayloadModelPrimitives = selectFromLoginPayload().errors.preApplicationStep.subdomain
